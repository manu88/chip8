//
//  Tests.cpp
//  asm
//
//  Created by Manuel Deneu on 26/03/2025.
//

#include "Tests.hpp"
#include "Assembler.hpp"
#include "Disassembler.hpp"
#include <assert.h>

static void TestValidInstruction(const std::string &inCode) {
    Assembler a(inCode);
    auto b = a.generate();
    assert(b.size() > 0);
    assert(a.getError() == std::nullopt);
    Disassembler d(b);
    d.params.noAutogeneratedComments = true;
    auto code = d.generate();
    code.resize(code.size() - 1); // remove last \n
    assert(code == inCode);
}

static void RunTests1() {
    TestValidInstruction("CLS");
    TestValidInstruction("RET");

    TestValidInstruction("LD V2, 0x78");
    TestValidInstruction("LD I, 0x500");
    TestValidInstruction("LD V3, 0x1");
    TestValidInstruction("LD V4, 0x1");
    TestValidInstruction("LD V1, K");
    TestValidInstruction("LD ST, V2");
    TestValidInstruction("LD F, V1");
    TestValidInstruction("DRW V3, V4, 0x5");
    TestValidInstruction("JP 0x200");
    TestValidInstruction("JP V0, 0x200");
}

static void TestInvalidASM(const std::string &code) {
    Assembler a(code);
    auto b = a.generate();
    assert(b.size() == 0);
    assert(a.getError() != std::nullopt);
    assert(a.getError().value().line == 1);
}
static void RunTests2() {
    TestInvalidASM("lol\n");
    TestInvalidASM("LD\n");
    TestInvalidASM("LD G, Vx");
    TestInvalidASM("LD V2\n");
    TestInvalidASM("LD V2, lol");
    TestInvalidASM("JP V0, addr");
    TestInvalidASM("LD I, lol");
    TestInvalidASM("LD G abcd");
    TestInvalidASM("LD ST, abcd");
    TestInvalidASM("LD ST, v15");
    TestInvalidASM("LD F, lol");
    TestInvalidASM("LD F, v-1");
    TestInvalidASM("LD Vx, Vy");
    TestInvalidASM("LD Vaa, Vff");
    TestInvalidASM("DRW foo, V67, foo");
    TestInvalidASM("JP bar");
    TestInvalidASM("DRW V3, VT, 0x5");
    TestInvalidASM("LD V1, 0xFF");
}

void RunTests() {
    RunTests1();
    RunTests2();
}
